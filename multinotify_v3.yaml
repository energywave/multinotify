# -------------------------------------------------------------------------------------------------
# Package Multinotify - Ver. 3.6.2
# Descrizione: script multinotify per gestire l'invio di notifiche con un unico servizio alle seguenti piattaforme:
#               - App companion (Android e iOS)
#               - Pushover
#               - HTML5
#               - Alexa (singole, gruppi, elenco)
#               - Google Home (e altri riproduttore TTS)
# Article with full details (italian language): https://henriksozzi.it/2022/01/package-multinotify-notifiche-su-alexa-e-app/
# Repository: https://github.com/energywave/multinotify
# -------------------------------------------------------------------------------------------------
# Author: Henrik Sozzi
# Site:   https://henriksozzi.it
# -------------------------------------------------------------------------------------------------
# CHANGELOG: please see the CHANGELOG.md file
# -------------------------------------------------------------------------------------------------
# Distributed with MIT license. PLease see LICENSE file for more details.
# -------------------------------------------------------------------------------------------------

# Please refer to the readme visible here: https://github.com/energywave/multinotify



############################
# ANCHOR PARAMETER TO SET: #
############################
# tts_default_service: set to "tts.cloud_say" to use Nabu Casa TTS (subscription needed) or "tts.google_translate_say" to use free Google Translate TTS
# default_valume: Set here the default announc volume you want to use if not otherwise specified (range: 0.1 - 10.0)
# iphones: set in this string exact service id corresponding to iOS devices, separated by comma (no spaces between!)
#          If you have groups of iOS only please specify them too.
#          DON'T use mixed Android / iOS groups!
#          Example: "notify.jennys_iphone,notify.all_iphones"
# iphones_critical_volume: set the volume you want to use for critical notifications on iOS devices if not otherwise specified

homeassistant:
  customize:
    package.node_anchors:
      tts_default_service: &tts_default_service "tts.cloud_say"
      default_volume: &default_volume 0.6
      iphones: &iphones "notify.mobile_app_iphone_di_erica"
      iphones_critical_volume: &iphones_critical_volume 1.0

# -------------------------- DON'T EDIT AFTER THIS LINE --------------------------

script:
  # This script is for internal use only. Don't call it directly!
  multinotify_tts_pre:
    alias: "Management of Alexa/TTS devices BEFORE the announcment"
    description: "Process every involved media_player entity BEFORE the announcment. It will backup information of every media player and stop the music. DON'T CALL IT DIRECTLY"
    fields:
      target:
        name: "Media player entity"
        description: "Media player entity to process"
      volume:
        name: "Volume to set"
        description: "Volume to set to this device"
    variables:
      default_volume: *default_volume
    sequence:
      - alias: "Set prev volume"
        service: python_script.set_state
        data:
          entity_id: "tmp.{{ target | regex_findall('\\.(\\w+)') | first }}_prev_volume"
          state: "{{state_attr(target, 'volume_level') | float(default_volume) | round(2)}}"
          was_playing: "{{states[target].state == 'playing'}}"
          allow_create: true
      - alias: "Was media player playing?"
        choose:
          - conditions: "{{states[target].state == 'playing'}}"
            sequence:
              - alias: "Pause the media player"
                service: media_player.media_pause
                target:
                  entity_id: "{{target}}"
      - alias: "Set desired volume"
        service: media_player.volume_set
        target:
          entity_id: "{{target}}"
        data:
          volume_level: "{{volume | float(default_volume) | round(2)}}"
      - alias: "Workaround to ensure that Alexa Media Player has an updated volume_level"
        service: python_script.set_state
        data:
          entity_id: "{{target}}"
          volume_level: "{{volume | float(default_volume) | round(2)}}"

  # This script is for internal use only. Don't call it directly!
  multinotify_tts_post:
    alias: "Management of Alexa/TTS devices AFTER the announcment"
    description: "Process every involved media_player entity AFTER the announcment. It will restore information of every media player and restart the music. DON'T CALL IT DIRECTLY"
    fields:
      target:
        name: "Media player entity"
        description: "Media player entity to process"
    variables:
      default_volume: *default_volume
    sequence:
      - variables:
          object_id: "{{target | regex_findall('\\.(\\w+)') | first}}"
          prev_vol: "tmp.{{object_id}}_prev_volume"
          was_playing: "{{state_attr(prev_vol, 'was_playing')}}"
      - alias: "Restore  previous volume"
        service: media_player.volume_set
        target:
          entity_id: "{{target}}"
        data:
          volume_level: "{{states(prev_vol) | float(default_volume) | round(2)}}"
      - alias: "Workaround to ensure that Alexa Media Player has an updated volume_level"
        service: python_script.set_state
        data:
          entity_id: "{{target}}"
          volume_level: "{{states(prev_vol)}}"

      - alias: "If the device was previously playing music we'll unpause it"
        choose:
          - conditions: "{{was_playing}}"
            sequence:
              - alias: "A delay to let Alexa Media Player apply the volume"
                delay: 2
              - alias: "Unpause music play"
                service: media_player.media_play
                target:
                  entity_id: "{{target}}"

  # Multinotify script. Here is all the magic :)
  multinotify:
    alias: "Multinotify - Smart, rich and powerful notifications"
    description: "Send a notification to Alexa, Google Home, Android and iOS Companion App, Pushover and HTML5. With many enanchments!"
    mode: queued
    max: 10
    fields:
      # Generic fields valid for all notify kinds
      title:
        name: "Title"
        description: "Notification title [ Alexa / TTS / Android / iOS / PushOver / HTML5 ]"
        selector:
          text:
        example: "A message from home"
      message:
        name: "Message"
        description: "Text to notify that will be read from media players and sent to phones/PC [ Alexa / TTS / Android / iOS / PushOver / HTML5 ]"
        selector:
          text:
        example: "A device stopped to work in the living room"
        required: true

      # Alexa
      alexa_target:
        name: "Alexa target"
        description: "Single Alexa entity_id, list of Alexa entity_ids, Home Assistant group or Alexa speaker group media player where you want to read the announcment"
        selector:
          entity:
            integration: alexa_media
            domain: media_player
        example: "media_player.first_floor_alexa"
      alexa_message:
        name: "Alexa message (if different)"
        description: "Text that Alexa must pronounce, if different from message parameter. You can use SSML here, for example. If not specified Alexa will read message parameter. [Alexa]"
        selector:
          text:
        example: '<say-as interpret-as="interjection">yippii</say-as>. That''s better to not show on phone notifications!'
      alexa_type:
        name: "Alexa announce type"
        description: "Alexa announce type [Alexa]"
        example: "announce"
        selector:
          select:
            options:
              - announce
              - tts
      alexa_volume:
        name: "Alexa volume"
        description: "the volume you want Alexa to read the announcment, if different from the default volume set in anchors parameter. [Alexa]"
        example: "0.6"
        selector:
          number:
            min: 0
            max: 1
            step: 0.1
            mode: "slider"
      alexa_force:
        name: "Alexa Force"
        description: "True to force Alexa to read the announcement even if current time is in DND time frame. False or not specify this parameter to respect DND time frame. [Alexa]"
        selector:
          boolean:
        example: "false"

      # TTS (Google Home)
      tts_target:
        name: "TTS target"
        description: "Google Home or TTS media player single entity, list of entities or media_player group that will play the announcment"
        selector:
          entity:
            domain: media_player
        example: "media_player.google_home_upstairs"
      tts_message:
        name: "TTS message (if different)"
        description: "Text that Google Home or TTS devices will read, if different from message parameter. If not specified the message parameter will be pronounced. [TTS]"
        selector:
          text:
        example: "Hello world, I'm Google Home!"
      tts_volume:
        name: "TTS volume"
        description: "The volume you want to use to play Google Home or TTS devices announcment, if different from the default one set in anchor parameter. [TTS]"
        example: "0.6"
        selector:
          number:
            min: 0
            max: 1
            step: 0.1
            mode: "slider"
      tts_service:
        name: "TTS service"
        description: "Service to use to generate audio from the message [TTS]"
        example: "tts.cloud_say"
        selector:
          select:
            options:
              - tts.cloud_say
              - tts.google_translate_say
      tts_force:
        name: "TTS force"
        description: "True to force Google Home or TTS to read the announcement even if current time is in DND time frame. False or not specify this parameter to respect DND time frame. [TTS]"
        selector:
          boolean:
        example: "false"

      # --- Notify to various apps ---
      # Companion app
      notify_app:
        name: "App notify services"
        description: "If you want to send a notification to phones specify the notify service id of the device you want to show notification or a list of notify service id."
        selector:
          object:
        example: |
          - notify.mio_android
          - notify.suo_ios

      # Pushover
      notify_pushover:
        name: "Pushover notify service"
        description: "the service id of pushover notify service to use."
        selector:
          text:
        example: "notify.pushover"

      # HTML5
      notify_html5:
        name: "HTML5 notify services"
        description: "If you want to show HTML5 notifications specify the service id of a registered HTML5 recipient or a list of HTML5 recipients"
        selector:
          object:
        example: |
          - notify.html5_home_pc
          - notify.html5_work_pc

      # Various app parameters
      icon:
        name: "Icon"
        description: 'The name of the file (without path, "notify_" prefix and extension) that will be used to be shown with notification. In the example "warning" will use the following file "/local/notify_warning.png" (that maps to the physical path of /config/www/notify_warning.png). If not specified it will be used, in order, channel or group or "info" [ Android / HTML5]'
        selector:
          text:
        example: "warning"
      tag:
        name: "Tag"
        description: "Tag field for the notification. If set the previous notification sent with the same tag will be replaced by this and you can even delete it [ Android / iOS / HTML5 ]"
        selector:
          text:
        example: "lightnings"
      group:
        name: "Group"
        description: 'Identification of the group of notifications. On phones notifications will be grouped between notification with same group value. If not specified it will be used, in order, channel or "info" [ Android / iOS ]'
        selector:
          text:
        example: "alarm"
      channel:
        name: "Channel"
        description: 'Identification of the channel. On Android every channel can have his own sound and other notification settings. If not specified it will be used, in order, group o "info". If critical: true channel will be ignored.  [ Android ]'
        selector:
          text:
        example: "Generic"
      subtitle:
        name: "Subtitle/subject"
        description: "Subtitle (iOS) or Subject (Android) of the notification [ Android / iOS ]"
        selector:
          text:
        example: "Important warning"
      critical:
        name: "Critical notification"
        description: 'Set to "true" to send a high priority notification that will play the notification sound even if your phone is in do not disturb mode. (useful for anti-theft or technical alarms), on HTML5 the notification will not hide until you interact with it. If you specify "false" or not specify this parameter a normal notification will be sent (default: false) [ Android / iOS / HTML5 ] '
        selector:
          boolean:
        example: "true"
      critical_volume:
        name: "Critical volume"
        description: "The volume that you want to play, if different from anchro parameter, on a iOS critical notificaion [ iOS ]"
        example: "0.6"
        selector:
          number:
            min: 0
            max: 1
            step: 0.1
            mode: "slider"
      url:
        name: "URL"
        description: "You can specify an absolute URL to open when the user click on notification or a UI relative page or on Android an app to open or even more [Android / iOS / PushOver / HTML5 ]"
        selector:
          text:
        example: "/lovelace/cameras"
      app_actions:
        name: "Actions"
        description: "A list of actions that user can click on within the notification. On android you can see maximum 3 action, on iOS max 10, on HTML5 max 2. Every element must have at least action and title [ Android / iOS / HTML5 ]"
        selector:
          object:
        example: |
          - action: "YES"
            icon: /local/yes.png
            title: "Yes, understood"
          - action: "NO"
            title: "No, please ignore"
          - action: "MAYBE"
            title: "Maybe, I don't know"
      attachment:
        name: "Attachment"
        description: "You can specify a relative or absolute uri of a resource to attach (every platform has its own limits) or the entity_id of a camera to automatically attach a snapshot of that camera [ Android / iOS / Pushover / HTML5 ]"
        selector:
          text:
        example: /media/local/file.jpg
      # --- PARAMETERS END ---

    variables:
      title_var: "{{title | default('Notify from home')}}"
      default_volume: *default_volume
      iphones: *iphones
      critical_var: "{{critical | default(false)}}"
      channel_var: "{{(channel | default(group) | default('info')) if not critical_var else None}}"
      media_stream_var: "{{'alarm_stream' if critical_var else None}}"
      iphones_critical_volume: *iphones_critical_volume
      attachment_video: >
        {% if attachment is defined and attachment.endswith((".mp4", ".mpg", ".mpeg", ".avi")) %}
          {{attachment}}
        {% else %}
          None
        {% endif %}
      camerastream_ios: >
        {% if attachment is defined and attachment.startswith('camera.') %}
          {{attachment}}
        {% else %}
          None
        {% endif %}
      attachment_image_android: >
        {% if attachment is defined and attachment.startswith("camera.")%}
          {{"/api/camera_proxy/" ~ attachment}}
        {% elif attachment is defined and attachment.endswith((".jpg", ".jpeg", ".gif", ".png")) %}
          {{attachment}}
        {% else %}
          None
        {% endif %}
      attachment_image_ios: >
        {% if attachment is defined and attachment.endswith((".jpg", ".jpeg", ".gif", ".png")) %}
          {{attachment}}
        {% else %}
          None
        {% endif %}
      attachment_audio_ios: >
        {% if attachment is defined and attachment.endswith((".aiff", ".wav", ".mp3")) %}
          {{attachment}}
        {% else %}
          None
        {% endif %}
      camera_entity: >
        {% if attachment is defined and attachment.startswith("camera.") %}
          {{attachment}}
        {% else %}
          None
        {% endif %}
      snapshot_filename_pushover: >
        {% if camera_entity is not none %}
        {# /config/tmp/{{states[camera_entity].name}} {{ now().strftime('%Y%m%d-%H%M%S') }}.jpg #}
          /config/tmp/{{states[camera_entity].name}} snapshot.jpg
        {% else %}
          None
        {% endif %}
      snapshot_filename_html5: >
        {% if camera_entity is not none %}
          {# /config/www/cam/{{states[camera_entity].name}} {{ now().strftime('%Y%m%d-%H%M%S') }}.jpg #}
          /config/www/cam/{{states[camera_entity].name}} snapshot.jpg
        {% else %}
          None
        {% endif %}
      attachment_pushover: >
        {% if attachment is defined and attachment.endswith((".jpg", ".jpeg", ".gif", ".png")) %}
          {{ attachment | replace("/media/local/","/media/") | replace("/local/","/config/www/")}}
        {% elif snapshot_filename_pushover is not none %}
          {{snapshot_filename_pushover}}
        {% else %}
          None
        {% endif %}
      attachment_image_html5: >
        {% if attachment is defined and attachment.endswith((".jpg", ".jpeg", ".gif", ".png")) %}
          {{attachment}}
        {% elif snapshot_filename_html5 is not none %}
          {{snapshot_filename_html5 | replace("/config/www/", "/local/")}}
        {% else %}
          None
        {% endif %}
      notify_apps: >
        {% if notify_app is defined and notify_app is string %}
          ['{{notify_app}}']
        {% elif notify_app is defined %}
          {{notify_app}}
        {% endif %}
      notify_html5s: >
        {% if notify_html5 is defined and notify_html5 is string %}
          ['{{notify_html5}}']
        {% elif notify_html5 is defined %}
          {{notify_html5}}
        {% endif %}
    sequence:
      # Ensure DND are initialized
      - alias: "Ensure DND are initialized"
        service: script.multinotify_dnd_init

      # Companion app
      - alias: "Notifica App"
        if: "{{notify_app is defined}}"
        then:
          repeat:
            for_each: "{{notify_apps}}"
            sequence:
              if: "{{repeat.item in iphones}}"
              then:
                # iOS companion app
                service: "{{repeat.item}}"
                data:
                  title: "{{title_var}}"
                  message: "{{message}}"
                  data:
                    video: "{{attachment_video}}"
                    image: "{{attachment_image_ios}}"
                    audio: "{{attachment_audio_ios}}"
                    subtitle: "{{subtitle | default(None)}}"
                    group: "{{group | default(channel) | default('info')}}"
                    tag: "{{tag | default(None)}}"
                    url: "{{url | default(None)}}"
                    entity_id: "{{camerastream_ios}}"
                    actions: "{{app_actions}}"
                    push:
                      interruption-level: "{{'critical' if critical_var else 'active'}}"
                      sound:
                        name: "{{channel_var}}"
                        critical: "{{'1' if critical_var else '0'}}"
                        volume: "{{critical_volume | default(iphones_critical_volume)}}"
              else:
                # Notifica dall'app companion ad Android
                service: "{{repeat.item}}"
                data:
                  title: "{{title_var}}"
                  message: "{{message}}"
                  data:
                    video: "{{attachment_video}}"
                    image: "{{attachment_image_android}}"
                    group: "{{group | default(channel) | default('info')}}"
                    channel: "{{channel_var}}"
                    media_stream: "{{media_stream_var}}"
                    tag: "{{tag | default('')}}"
                    icon_url: "/local/notify_{{icon | default(channel) | default(group) | default('info')}}.png"
                    ttl: 0
                    priority: high
                    importance: "{{'high' if critical_var else 'default'}}"
                    color: "{{'red' if critical_var else ''}}"
                    ledColor: "{{'red' if critical_var else ''}}"
                    persistent: "{{critical_var}}"
                    subject: "{{subtitle | default(None)}}"
                    clickAction: "{{url | default(None)}}"
                    actions: "{{app_actions}}"

      # Pushover
      - alias: "Pushover notify"
        if: "{{ notify_pushover is defined }}"
        then:  
          - if: "{{camera_entity is not none}}"
            then:
              - service: camera.snapshot
                target:
                  entity_id: "{{camera_entity}}"
                data:
                  filename: "{{snapshot_filename_pushover}}"
          - service: "{{notify_pushover}}"
            data:
              title: "{{title_var}}"
              message: "{{message}}"
              data:
                attachment: "{{attachment_pushover}}"
                url: "{{url | default(None)}}"
                priority: "{{2 if critical_var else 0}}"

      # HTML5
      - alias: "HTML5 notify"
        if: "{{notify_html5 is defined}}"
        then:
          - if: "{{camera_entity is not none}}"
            then:
              - service: camera.snapshot
                target:
                  entity_id: "{{camera_entity}}"
                data:
                  filename: "{{snapshot_filename_html5}}"
          - repeat:
              for_each: "{{notify_html5s}}"
              sequence:
                if: "{{app_actions is defined and app_actions is not none}}"
                then:
                  service: "{{repeat.item}}"
                  data:
                    title: "{{title_var}}"
                    message: "{{message}}"
                    data:
                      ttl: 0
                      priority: high
                      tag: "{{tag | default('')}}"
                      url: "{{url | default(None)}}"
                      actions: "{{app_actions}}"
                      requireInteraction: "{{(critical == true)}}"
                      image: "{{attachment_image_html5}}"
                      icon: "/local/notify_{{icon | default(channel) | default(group) | default('info')}}.png"
                else:
                  service: "{{repeat.item}}"
                  data:
                    title: "{{title_var}}"
                    message: "{{message}}"
                    data:
                      ttl: 0
                      priority: high
                      tag: "{{tag | default('')}}"
                      url: "{{url | default(None)}}"
                      requireInteraction: "{{(critical == true)}}"
                      image: "{{attachment_image_html5}}"
                      icon: "/local/notify_{{icon | default(channel) | default(group) | default('info')}}.png"

      # Alexa announcment
      - alias: "Alexa notify"
        choose:
          - conditions:
              - alias: "Is alexa_target specified from the caller?"
                condition: template
                value_template: "{{ alexa_target is defined }}"
              - alias: "If outside DND or alexa_force = true"
                condition: or
                conditions:
                  - condition: template
                    value_template: "{{ alexa_force | default(false)}}"
                  - condition: time
                    after: input_datetime.multinotify_dnd_end
                    before: input_datetime.multinotify_dnd_start
            sequence:
              # script.multinotify_alexa_pre: save previous volume, set announcment volume and pause music on all inherent devices
              - variables:
                  list: >
                    {% set object_id = alexa_target | regex_findall('\\.(\\w+)') | first %}
                    {% if not alexa_target is string %}
                      {# Inline list of entities #}
                      {{alexa_target | join(',')}}
                    {% elif alexa_target.startswith('group.') %}
                      {# Home Assistant defined group #}
                      {{expand(states[alexa_target]) | join(',', attribute='entity_id')}}
                    {% elif alexa_target.startswith('media_player.') and states['group.' ~ object_id] != None %}
                      {# Speaker group defined in Alexa app (a corresponding Home Assistant group with same name is needed!) #}
                      {{expand(states['group.' ~ object_id]) | join(',', attribute='entity_id')}}
                    {% elif alexa_target.startswith('media_player.') %}
                      {# Single Alexa entity #}
                      {{alexa_target}}
                    {% endif %}
                  count: "{{list.split(',') | count}}"
              - repeat:
                  while: "{{ repeat.index <= count }}"
                  sequence:
                    - variables:
                        entity_id: "{{list.split(',')[repeat.index-1]}}"
                    - service: script.multinotify_tts_pre
                      data:
                        target: "{{entity_id}}"
                        volume: "{{alexa_volume | default(default_volume)}}"

              # Real notification
              - variables:
                  message: "{{alexa_message | default(message)}}"
                  pure_message: "{{message | regex_replace(find='<[^>]*>', replace='')}}"
              - service: notify.alexa_media
                data:
                  message: "{{message}}"
                  data:
                    type: "{{alexa_type | default('announce')}}"
                  target: "{{alexa_target}}"
              # Wait for the time that Alexa will use to play the announcement
              - delay:
                  seconds: "{{(5 + (pure_message.count(', ') + pure_message.count('. ') + pure_message.count('! ') + pure_message.count('? ') + pure_message.count(': ') + pure_message.count('; ')) | float(0) * 0.35 + (pure_message | length) * 0.06) | round(default=0)}}"
              - alias: "Set last announcment read"
                service: python_script.set_state
                data:
                  entity_id: input_text.multinotify_last_alexa_message
                  state: "{{pure_message}}"
                  message: "{{message}}"

              # script.multinotify_alexa_post: restore previous volume, unpause the music on all inherent devices
              - repeat:
                  while: "{{ repeat.index <= count }}"
                  sequence:
                    - variables:
                        entity_id: "{{list.split(',')[repeat.index-1]}}"
                    - service: script.multinotify_tts_post
                      data:
                        target: "{{entity_id}}"

      # Google Home / TTS
      - alias: "Google Home / TTS notify"
        choose:
          - conditions:
              - alias: "tts_target was set from caller?"
                condition: template
                value_template: "{{ tts_target is defined }}"
              - alias: "Outside DND time frame or tts_force = true"
                condition: or
                conditions:
                  - condition: template
                    value_template: "{{ tts_force | default(false)}}"
                  - condition: time
                    after: input_datetime.multinotify_dnd_end
                    before: input_datetime.multinotify_dnd_start
            sequence:
              # script.multinotify_tts_pre: save previous volume, set anouncement volume and pause playing music on all inherent devices
              - variables:
                  list: >
                    {% set object_id = tts_target | regex_findall('\\.(\\w+)') | first %}
                    {% if not tts_target is string %}
                      {# A list of inline entities #}
                      {{tts_target | join(',')}}
                    {% elif tts_target.startswith('group.') %}
                      {# Media player group #}
                      {{expand(states[tts_target]) | join(',', attribute='entity_id')}}
                    {% elif tts_target.startswith('media_player.') %}
                      {# Single media player entity #}
                      {{tts_target}}
                    {% endif %}
                  count: "{{list.split(',') | count}}"
              - repeat:
                  while: "{{ repeat.index <= count }}"
                  sequence:
                    - variables:
                        entity_id: "{{list.split(',')[repeat.index-1]}}"
                    - service: script.multinotify_tts_pre
                      data:
                        target: "{{entity_id}}"
                        volume: "{{tts_volume | default(default_volume)}}"

              # Real notification
              - variables:
                  message: "{{tts_message | default(message)}}"
                  default_service: *tts_default_service
                  service: "{{tts_service | default(default_service)}}"
              - service: "{{service}}"
                data:
                  entity_id: "{{tts_target}}"
                  message: "{{message}}"
                  language: >
                    {% if service == "tts.google_translate_say" %}
                      it
                    {% else %}
                      it-IT
                    {% endif%}
                  # options: >
                  #   {% if service == "tts.cloud_say" %}gender: female{%endif%}
              # Wait for the time that Google Home will use to play the announcement
              - delay:
                  seconds: "{{(1 + (message.count(', ') + message.count('. ') + message.count('! ') + message.count('? ') + message.count(': ') + message.count('; ')) | float(0) * 0.35 + (message | length) * 0.06) | round(default=0)}}"
              - alias: "Set last message read"
                service: python_script.set_state
                data:
                  entity_id: input_text.multinotify_last_tts_message
                  state: "{{message}}"
                  message: "{{message}}"

              # script.multinotify_tts_post: restore previous volume on all inherent devices
              - repeat:
                  while: "{{ repeat.index <= count }}"
                  sequence:
                    - variables:
                        entity_id: "{{list.split(',')[repeat.index-1]}}"
                    - service: script.multinotify_tts_post
                      data:
                        target: "{{entity_id}}"

  multinotify_dnd_init:
    alias: "Ensure DND initialization for multinotify"
    description: "If DND times are not set then a default will be automatically set to avoid new users having DND from 00:00 to 00:00..."
    sequence:
      if: "{{is_state('input_datetime.multinotify_dnd_end', '00:00:00') and is_state('input_datetime.multinotify_dnd_start', '00:00:00')}}"
      then:
        - service: input_datetime.set_datetime
          target:
            entity_id: input_datetime.multinotify_dnd_end
          data:
            time: "09:00:00"
        - service: input_datetime.set_datetime
          target:
            entity_id: input_datetime.multinotify_dnd_start
          data:
            time: "23:00:00"

automation:
  # Workaround for the peculiarity of Alexa Media Player not setting the volume_level attribute at Home Assistant start
  # Ref: https://github.com/custom-components/alexa_media_player/issues/1394
  - id: 2d897264-e05c-46bd-ba23-772fbeeab7be
    alias: "Alexa - Event - Set a default volume to all Alexa devices at HA start"
    trigger:
      - platform: homeassistant
        event: start
    variables:
      default_volume: *default_volume
    action:
      - alias: "Imposta il volume al valore di default"
        service: media_player.volume_set
        target:
          entity_id: group.ovunque
        data:
          volume_level: "{{default_volume}}"
